name: Release

on:
  push:
    tags:
      - '*.*.*'

permissions:
  contents: write

jobs:
  package:
    name: Build and Release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Install dependencies (Ubuntu)
        if: startsWith(matrix.os, 'ubuntu')
        run: sudo apt-get install -y libarchive-tools

      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.14.0'
          cache: 'npm'

      - name: Clean install to fix optional native module bug
        shell: bash
        if: matrix.os != 'windows-latest'
        run: |
          rm -rf node_modules package-lock.json
          npm install

      - name: Clean  (Windows)
        shell: pwsh
        if: matrix.os == 'windows-latest'
        run: |
          if (Test-Path node_modules) { Remove-Item -Recurse -Force node_modules }
          if (Test-Path package-lock.json) { Remove-Item -Force package-lock.json }
          npm install

      - name: Build and release (macOS)
        if: matrix.os == 'macos-latest'
        uses: samuelmeuli/action-electron-builder@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          release: true
          mac_certs: ${{ secrets.MAC_CERTS }}
          mac_certs_password: ${{ secrets.MAC_CERTS_PASSWORD }}
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASS: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}

      - name: Build and release (Windows/Linux)
        if: matrix.os != 'macos-latest'
        uses: samuelmeuli/action-electron-builder@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          release: true
          args: --publish never

      - name: Collect distributables
        shell: bash
        run: |
          mkdir -p release

          # move ymls
          [ -f release/latest.yml ] && mv release/latest.yml release/latest-mac.yml
          [ -f release/release-files-ubuntu-latest/latest.yml ] && mv release/release-files-ubuntu-latest/latest.yml release/latest-linux.yml
          [ -f release/release-files-windows-latest/latest.yml ] && mv release/release-files-windows-latest/latest.yml release/latest-win.yml

          # move distributables
          mv release/release-files-macos-latest/*.dmg release/ 2>/dev/null || true
          mv release/release-files-macos-latest/*.zip release/ 2>/dev/null || true
          mv release/release-files-windows-latest/*.exe release/ 2>/dev/null || true
          mv release/release-files-ubuntu-latest/*.AppImage release/ 2>/dev/null || true

      - name: Upload distributables
        uses: actions/upload-artifact@v4
        with:
          name: flat-release
          path: release/
          if-no-files-found: error

  upload:
    name: Upload to FTP
    needs: package
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Download distributables only
        uses: actions/download-artifact@v4
        with:
          name: flat-release
          path: release

      - name: Install FTP client
        run: npm install ftp

      - name: Upload to FTP
        run: node scripts/upload-ftp.js
        env:
          FTP_HOST: ${{ secrets.FTP_HOST }}
          FTP_USERNAME: ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
