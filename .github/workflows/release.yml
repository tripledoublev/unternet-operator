name: Release

on:
  push:
    tags:
      - '*.*.*'
permissions:
  contents: write
jobs:
  package:
    name: Build and Release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Install dependencies (Ubuntu)
        if: startsWith(matrix.os, 'ubuntu')
        run: sudo apt-get install -y libarchive-tools

      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.14.0'
          cache: 'npm'

      - name: Clean install to fix optional native module bug (non-Windows)
        if: matrix.os != 'windows-latest'
        run: |
          rm -rf node_modules package-lock.json
          npm install

      - name: Clean install to fix optional native module bug (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          if (Test-Path node_modules) {
            Remove-Item -Recurse -Force node_modules
          }
          if (Test-Path package-lock.json) {
            Remove-Item -Force package-lock.json
          }
          npm install

      - name: Build and release (macOS)
        if: matrix.os == 'macos-latest'
        uses: samuelmeuli/action-electron-builder@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          release: true
          mac_certs: ${{ secrets.mac_certs }}
          mac_certs_password: ${{ secrets.mac_certs_password }}
        env:
          APPLE_ID: ${{ secrets.apple_id }}
          APPLE_ID_PASS: ${{ secrets.apple_id_pass }}
          APPLE_TEAM_ID: ${{ secrets.apple_team_id }}
          FTP_USERNAME: ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}

      - name: Build and release (Windows/Linux)
        if: matrix.os != 'macos-latest'
        uses: samuelmeuli/action-electron-builder@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          release: true
          args: --publish never
        env:
          FTP_USERNAME: ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}

      - name: Upload artifacts (per OS)
        uses: actions/upload-artifact@v4
        with:
          name: release-files-${{ matrix.os }}
          path: release/
          if-no-files-found: error

  upload:
    name: Upload to FTP
    needs: package
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Download all artifacts (flattened)
        uses: actions/download-artifact@v4
        with:
          path: release

      - name: Install FTP client dependency
        run: npm install ftp

      - name: List release contents
        run: find release -type f

      - name: Upload to FTP
        run: node scripts/upload-ftp.js
        env:
          FTP_HOST: ${{ secrets.FTP_HOST }}
          FTP_USERNAME: ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
